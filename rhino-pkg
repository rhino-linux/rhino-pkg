#!/bin/bash

tabs -4

export TEXTDOMAIN=rhino-pkg
if [[ -n $RHINOPKG_DEBUG ]]; then
    export TEXTDOMAINDIR="${PWD}/locale"
else
    export TEXTDOMAINDIR=/usr/share/locale
fi

c1=$'\u001b[38;5;104m' # light purple
c2=$'\u001b[0m'        # white/reset
c3=$'\u001b[38;5;55m'  # dark purple
c4=$'\u001b[38;5;98m'  # medium purple

help_flag="USAGE: rhino-pkg [function] {flag} <input>

functions:
    install: Install package(s) - Prompts user to respond with 
             the number(s) associated with the desired package(s).
             
    remove:  Uninstall package(s) - Prompts user to respond with
             the number(s) associated with the desired package(s).
             
    search:  Search for package(s) - Does not have a second prompt.
    
    update:  Updates all packages accessible to the wrapper - does
             not accept <input>, instead use install to update 
             individual packages. Has confirmation prompt.

flags: 
    --help/-h: Display this page
    
    --description/-d: By default, rhino-pkg will only display packages 
    that contain <input> within their name. Use this flag to increase 
    range and display packages with <input> in their description.
    
input: 
    Provide a package name or description.

Example execution:
       >>> rhino-pkg install foobar
       Searching...
       Found packages matching 'foobar':

       [0]: pyfoobar (apt)
       [1]: foobarshell (apt)
       [2]: foobar (flatpak)
       [3]: foobar-web (snap)
       [4]: foobar-bin (pacstall)
       [5]: foobar-theme (pacstall)

       Select which package to install [0-5]: 3 4 5
       Selecting 'foobar-web' from package manager 'snap'
       Selecting 'foobar-bin' from package manager 'pacstall'
       Selecting 'foobar-theme' from package manager 'pacstall'
       Are you sure? (y/N)
       [...]
      
${c1}       .;:;,.  .:       
${c1}    'coooooooo:oo.';.   
${c1}  ,oooooooooooooooo    ;
${c1} clllcccllloooooooo;c:'o
${c1}.${c3};${c4}';:::::::::${c1}cclooooooo'
${c3}''',${c4}::::::::::::::${c1}ccclc.
${c3}.'''${c4};::::::::::${c2}l${c4}::::::: 
${c3} ''''${c4},:::::::::${c2}kd${c4}.      
${c3} .'''''${c4},;::${c2}ck:${c2}oW${c4};       
${c3}   ''''''''${c2}kXOM.        
${c3}     .,,:${c2}dXMK           
${c3}       ${c2}:k
$(basename "$0") 0.0.2
A package manager wrapper for Pacstall, APT, Flatpak and snap
Developed by Henryws <hwengerstickel@protonmail.com> for the Rhino Linux distribution"

export NC='\033[0m'
export BGreen='\033[1;32m'
export BCyan='\033[1;36m'
export BYellow='\033[1;33m'
export BPurple='\033[1;35m'
export BRed='\033[1;31m'
export BWhite='\033[1;37m'

function msg() {
    local input="$*"
    echo -e "$input"
}

function prompt() {
    local input="$1"
    local index="$2"
    echo -ne "$input [0-$index]: ${BWhite}"
}

function clearscr() {
    tput cuu 1 && tput el
}

function search_pacstall() {
    if ! pacstall -S "$*" > /dev/null 2>&1; then
        return 1
    else
        # remove color codes
        local contents=("$(pacstall -S "$*" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | awk '{print $1}')")
    fi
    echo "${contents[@]}"
}

function search_apt() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(apt-cache search --names-only "$*" | awk '{print $1}')")
    else
        local contents=("$(apt-cache search "$*" | awk '{print $1}')")
    fi
    if [[ -n $contents ]]; then
        echo "${contents[@]}"
    else
        return 1
    fi
}

function search_flatpak() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2 | grep -o "$*")")
    else
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2)")
    fi
    if [[ ${contents[*]} == "No matches found" ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

function search_snap() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2 | grep -o "$*")")
    else
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2)")
    fi
    if [[ ${contents[*]} == "No matching snaps for"* ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

case "${1}" in
    search)
        SEARCH=true
        shift
        ;;
    install)
        INSTALL=true
        shift
        ;;
    -h | --help)
        echo "$help_flag"
        ;;
    *)
        echo "$help_flag"
        exit 1
        ;;
esac

if [[ $1 == "-d" || $1 == "--description" ]]; then
    DESCRIPTION=true
    shift
fi

if command -v pacstall &> /dev/null; then
    msg $"Searching Pacstall…"
    pacstall_search_list=($(search_pacstall $*))
    clearscr
fi
msg $"Searching apt…"
apt_search_list=($(search_apt $*))
clearscr
if command -v flatpak &> /dev/null; then
    msg $"Searching flatpak…"
    flatpak_search_list=($(search_flatpak $*))
    clearscr
fi
if command -v snap &> /dev/null; then
    msg $"Searching snap…"
    snap_search_list=($(search_snap $*))
    clearscr
fi

if [[ ${#pacstall_search_list} -eq 0 && ${#apt_search_list} -eq 0 && ${#flatpak_search_list} -eq 0 && ${#snap_search_list} -eq 0 ]]; then
    msg $"No packages found matching '$*'!"
    exit 1
fi

msg $"Found packages matching '${BPurple}$*${NC}':"
echo

count=0
pkgs=()
pkgrepo=()

for i in "${flatpak_search_list[@]}"; do
    echo -e "[${BCyan}$count${NC}]: $i (${BCyan}flatpak${NC})"
    pkgs+=("$i")
    pkgrepo+=("flatpak")
    ((count++))
done
for i in "${apt_search_list[@]}"; do
    echo -e "[${BGreen}$count${NC}]: $i (${BGreen}apt${NC})"
    pkgs+=("$i")
    pkgrepo+=("apt")
    ((count++))
done
for i in "${pacstall_search_list[@]}"; do
    echo -e "[${BYellow}$count${NC}]: $i (${BYellow}pacstall${NC})"
    pkgs+=("$i")
    pkgrepo+=("pacstall")
    ((count++))
done
for i in "${snap_search_list[@]}"; do
    echo -e "[${BRed}$count${NC}]: $i (${BRed}snap${NC})"
    pkgs+=("$i")
    pkgrepo+=("snap")
    ((count++))
done

((count--))

if [[ -n $SEARCH ]]; then
    exit 0
fi

echo

prompt $"Select which package to install" "$count"
read -ra entered_input
echo -ne "${NC}"
if [[ ! ${entered_input[*]} =~ ^(([0-9])\s?)+ ]]; then
    msg $"'${entered_input[*]}' is not a valid number"
    exit 1
fi

for i in "${!entered_input[@]}"; do
    msg $"Selecting '${BPurple}${pkgs[i]}${NC}' from package manager '${BPurple}${pkgrepo[i]}${NC}'"

    case "${pkgrepo[i]}" in
        flatpak)
            flatpak install "${pkgs[i]}" -y
            ret=$?
            ;;
        apt)
            if command -v nala &> /dev/null; then
                sudo nala install "${pkgs[i]}" -y
                ret=$?
            else
                sudo apt install "${pkgs[i]}" -y
                ret=$?
            fi
            ;;
        pacstall)
            pacstall -I "${pkgs[i]}"
            ret=$?
            ;;
        snap)
            sudo snap install "${pkgs[i]}"
            ret=$?
            ;;
        *)
            msg $"Invalid repository name!"
            exit 1
            ;;
    esac
done

exit "$ret"
