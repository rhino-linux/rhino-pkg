#!/usr/bin/env -S nu --plugins '[/usr/share/nutext/nu_plugin_nutext]'

use "/usr/share/rhino-pkg/modules/lib/" [search]
use "/usr/share/rhino-pkg/modules/pluggables/" [apt flatpak pacstall snap]
use "/usr/share/rhino-pkg/modules/lib/cmd.nu" [prompt cleanup-pkg remove-pkg repo-sync]

tregister /usr/share/locale/ rhino-pkg

def main [
    --description (-d) # Increase range and display packages with <input> in their description
    --help (-h) # Display help page
    --yes (-y) # Makes functions with confirmation prompts run promptless
    ...rest: string # 'install', 'remove', 'search', 'update', 'cleanup', etc
] : any -> int {
    run-external $env.CURRENT_FILE help
    if ($rest | is-empty) {
        exit 1
    }
}

def "main --help" [] { main help }

def "main -h" [] { main help }

def "main help" [] {
    let help_cmds = [
        {
            Command: "search",
            Description: "Search for packages from all available managers",
            Usage: "search <input>",
            Flags: "--description",
            Variants: "s (-d), sd"
        },
        {
            Command: "install",
            Description: "Install packages; prompts from selection with repository search",
            Usage: "install <input>",
            Flags: "--description, --yes",
            Variants: "i (-d -y), id (-y)"
        },
        {
            Command: "remove",
            Description: "Uninstall packages; prompts for selection with local search",
            Usage: "remove <input>",
            Flags: "--yes",
            Variants: "{r|rm} (-y)"
        },
        {
            Command: "cleanup",
            Description: "Repair broken packages and remove unused dependencies",
            Usage: "cleanup",
            Flags: "--yes",
            Variants: "c (-y)"
        },
        {
            Command: "sync",
            Description: "Refresh repository data for all available managers",
            Usage: "sync",
            Flags: "",
            Variants: "sy"
        },
        {
            Command: "update",
            Description: "Refresh repository data and update all packages",
            Usage: "update",
            Flags: "--yes",
            Variants: "{u|up|upgrade} (-y)"
        },
        {
            Command: "help",
            Description: "Show this help message",
            Usage: "help",
            Flags: "",
            Variants: "-h, --help"
        }
    ]

    let help_flags = [
        {
            Flag: "-h, --help",
            Description: "Show this help message"
        },
        {
            Flag: "-d, --description",
            Description: "Search in and show package descriptions"
        },
        {
            Flag: "-y, --yes",
            Description: "Skip confirmation prompts"
        }
    ]

    print $"USAGE:\n  rpk [function] {flag} <input>\n
($help_flags | table -i false -t none)
($help_cmds | select Command Description | table -i false -t none)
($help_cmds | select Usage Flags Variants | table -i false -t none)
rpk 2.0.0\nA package manager wrapper for Pacstall, APT, Flatpak and Snap\n
Created by Elsie19 <elsie19@pm.me>
Developed for the Rhino Linux distribution."
}

def "main s" [
    --description (-d)
    rest: string
] {
    if $description {
        main search $rest --description
    } else {
        main search $rest
    }
}

def "main sd" [
    rest: string
] { main search $rest --description }

def "main search" [
    --description (-d) # Increase range and display packages with <input> in their description
    rest: string # Search query
] {
    # Block output from `return` here.
    let dummy = (search search-pkgs $description $rest)
    if ($dummy | is-empty) {
        tprint -e "No packages found matching '{rest}'!" { rest: $rest }
        exit 1
    } else {
        if $description {
            return (
                $dummy
                | select index pkg provider desc
                | rename index Package Provider Description
                | table -t thin
            )
        } else {
            return (
                $dummy
                | select index pkg provider
                | rename index Package Provider
            )
        }
    }
}

def "main i" [
    --description (-d)
    --yes (-y)
    rest: string
] {
    if $description {
        if $yes {
            main install $rest --description --yes
        } else {
            main install $rest --description
        }
    } else {
        if $yes {
            main install $rest --yes
        } else {
            main install $rest
        }
    }
}

def "main id" [
    --yes (-y)
    rest: string
] {
    if $yes {
        main install $rest --description --yes
    } else {
        main install $rest --description
    }
}

def "main install" [
    --description (-d) # Increase range and display packages with <input> in their description
    --yes (-y) # Makes functions with confirmation prompts run promptless
    rest: string # Search query
] {
    # Block output from `return` here.
    let dummy = (search search-pkgs $description $rest)
    if ($dummy | is-empty) {
        tprint -e "No packages found matching '{rest}'!" { rest: $rest }
        exit 1
    } else {
        if $description {
            print (
                $dummy
                | select index pkg provider desc
                | rename index Package Provider Description
                | table -t thin
            )
        } else {
            print (
                $dummy
                | select index pkg provider
                | rename index Package Provider
            )
        }
    }
    let which = (prompt (_ "Select which packages to install") $dummy)
    $which | each {|part|
        tprint "Selecting '{pkg}' from package manager '{provider}'" {
            pkg: $"(ansi purple_bold)($part.pkg | ansi strip)(ansi reset)",
            provider: $"(ansi purple_bold)($part.provider | ansi strip)(ansi reset)"
        }
    }
    if not $yes {
        let response = (input (_ "Are you sure? ({y}/{n}) " {
                    y: $"(ansi green_bold)y(ansi reset)",
                    n: $"(ansi red_bold)N(ansi reset)" }
            )
        )
        if not ($response | str downcase | str starts-with "y") {
            exit 1
        }
    }
    for part in $which {
        try {
            match ($part.provider | ansi strip) {
                "apt" => {
                    apt install ($part.pkg | ansi strip) $yes
                }
                "pacstall" => {
                    pacstall install ($part.pkg | ansi strip) $part.repo $yes
                }
                "flatpak" => {
                    flatpak install ($part.pkg | ansi strip) $part.remote $yes
                }
                "snap" => {
                    snap install ($part.pkg | ansi strip) $part.notes
                }
            }
        } catch {
            tprint -e "Failed to install '{pkg}'." { pkg: $"(ansi red)($part.pkg | ansi strip)(ansi reset)" }
            exit $env.LAST_EXIT_CODE
        }
    }
}

def "main r" [
    --yes (-y)
    rest: string
] {
    if $yes {
        main remove $rest --yes
    } else {
        main remove $rest
    }
}

def "main rm" [
    --yes (-y)
    rest: string
] {
    if $yes {
        main remove $rest --yes
    } else {
        main remove $rest
    }
}

def "main remove" [
    --yes (-y) # Makes functions with confirmation prompts run promptless
    rest: string # Search query
] {
    # Block output from `return` here.
    let dummy = (search search-local-pkgs $rest)
    if (($dummy | length) <= 0) {
        tprint -e "No packages found matching '{rest}'!" { rest: $rest }
        return
    } else {
        print (
            $dummy
            | select index pkg version provider
        )
    }
    let which = (prompt (_ "Select which package to remove") $dummy)
    $which | each { |part|
        tprint -e "Removing '{part}' from '{provider}'" {
            part: $"(ansi purple_bold)($part.pkg | ansi strip)(ansi reset)",
            provider: $"(ansi purple_bold)($part.provider | ansi strip)(ansi reset)"
        }
    }
    let response = (input (_ "Are you sure? ({y}/{n}) " {
                y: $"(ansi green_bold)y(ansi reset)",
                n: $"(ansi red_bold)N(ansi reset)" }
        )
    )
    if not ($response | str downcase | str starts-with "y") {
        exit 1
    }
    for $part in $which {
        remove-pkg ($part.pkg | ansi strip) ($part.provider | ansi strip) $yes
    }
}

def "main c" [
    --yes (-y)
] {
    if $yes {
        main cleanup --yes
    } else {
        main cleanup
    }
}

def "main cleanup" [
    --yes (-y) # Makes functions with confirmation prompts run promptless
] {
    if not $yes {
        if not (input (_ "Attempting to repair dependencies and remove unused packages. Continue? ({y}/{n}) " {
                    y: $"(ansi green_bold)y(ansi reset)",
                    n: $"(ansi red_bold)N(ansi reset)"
                }
            )
                | str downcase
                | str starts-with "y") {
            exit 1
        }
    }
    cleanup-pkg $yes
}

def "main u" [
    --yes (-y)
] {
    if $yes {
        main update --yes
    } else {
        main update
    }
}

def "main up" [
    --yes (-y)
] {
    if $yes {
        main update --yes
    } else {
        main update
    }
}

def "main upgrade" [
    --yes (-y)
] {
    if $yes {
        main update --yes
    } else {
        main update
    }
}

def "main update" [
    --yes (-y) # Makes functions with confirmation prompts run promptless
] {
    if (not $yes) {
        let response = (input (_ "Are you sure you want to update all packages? ({y}/{n}) " {
                    y: $"(ansi green_bold)y(ansi reset)",
                    n: $"(ansi red_bold)N(ansi reset)"
                }
            ))
        if not ($response | str downcase | str starts-with "y") {
            exit 1
        }
    }
    apt upgrade $yes
    pacstall upgrade $yes
    flatpak upgrade $yes
    snap upgrade $yes
}

def "main sy" [] {
    repo-sync
}

def "main sync" [] {
    repo-sync
}
